from aiogram import Router, types

from dotenv import load_dotenv
import keyboards as kb
load_dotenv()

jurist_router = Router(name="jurist_router")  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏


# –°–ø–∏—Å–æ–∫ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π
free_legal_services = """
üìö <b>–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è —é—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –ø–æ–º–æ—â—å –≤ –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω–µ:</b>

1. <b>–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –∫–ª–∏–Ω–∏–∫–∞ "–ê–¥–∏–ª–µ—Ç"</b>
   - –¢–µ–ª–µ—Ñ–æ–Ω: +996 312 66 06 66
   - –ê–¥—Ä–µ—Å: –≥. –ë–∏—à–∫–µ–∫, —É–ª. –¢—ã–Ω—ã—Å—Ç–∞–Ω–æ–≤–∞, 78

2. <b>–û–§ "–¶–µ–Ω—Ç—Ä –ø–æ–º–æ—â–∏ –∂–µ–Ω—â–∏–Ω–∞–º"</b>
   - –¢–µ–ª–µ—Ñ–æ–Ω: +996 312 88 03 88

3. <b>–û–§ "–ü—Ä–∞–≤–æ–≤–∞—è –ø–æ–º–æ—â—å"</b>
   - –ì–æ—Ä—è—á–∞—è –ª–∏–Ω–∏—è: 0 800 00 00

4. <b>–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –∫–ª–∏–Ω–∏–∫–∞ –ö–ì–Æ–ê</b>
   - –¢–µ–ª–µ—Ñ–æ–Ω: +996 312 54 32 10
"""


def get_jurist_keyboard():
    return types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —é—Ä–∏—Å—Ç—ã")],
            [types.KeyboardButton(text="–ö–∞–∫ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏–µ?")],
            [types.KeyboardButton(text="–ú–æ–∏ –ø—Ä–∞–≤–∞")],
            [types.KeyboardButton(text="‚Ü©Ô∏è –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é")]
        ],
        resize_keyboard=True,
        input_field_placeholder="–ó–∞–¥–∞–π—Ç–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å..."
    )



async def start_jurist(message: types.Message):
    await message.answer(
        "üë®‚öñÔ∏è <b>–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é :",
        reply_markup=get_jurist_keyboard(),
        parse_mode='HTML'
    )



async def show_lawyers(message: types.Message):
    await message.answer(free_legal_services, parse_mode='HTML')



async def how_to_apply(message: types.Message):
    await message.answer(
        "üìù <b>–ö–∞–∫ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏–µ:</b>\n\n"
        "1. –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã\n2. –°–æ—Å—Ç–∞–≤—å—Ç–µ –∑–∞—è–≤–ª–µ–Ω–∏–µ\n"
        "3. –ü–æ–¥–∞–π—Ç–µ –≤ –∏–Ω—Å—Ç–∞–Ω—Ü–∏—é\n4. –ü–æ–ª—É—á–∏—Ç–µ –æ—Ç–º–µ—Ç–∫—É",
        parse_mode='HTML'
    )



async def basic_rights(message: types.Message):
    await message.answer(
        "üîπ <b>–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∞–≤–∞:</b>\n\n"
        "- –ü—Ä–∞–≤–æ –Ω–∞ –∂–∏–∑–Ω—å\n- –ü—Ä–∞–≤–æ –Ω–∞ —Ç—Ä—É–¥\n- –ü—Ä–∞–≤–æ –Ω–∞ –∂–∏–ª–∏—â–µ\n"
        "- –ü—Ä–∞–≤–æ –Ω–∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫—É—é –ø–æ–º–æ—â—å",
        parse_mode='HTML'
    )



async def exit_jurist(message: types.Message):
    await message.answer(
        "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=kb.reply_menu)



# @jurist_router.message(F.text)
# async def handle_question(message: types.Message):
#     try:
#         response = client.chat.completions.create(
#             model="gpt-3.5-turbo",
#             messages=[
#                 {"role": "system", "content": "–¢—ã —é—Ä–∏—Å—Ç –ö–†. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –ø–æ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤—É."},
#                 {"role": "user", "content": message.text}
#             ],
#             temperature=0.3,
#             max_tokens=500
#         )
#
#         answer = response.choices[0].message.content
#         await message.answer(
#             f"‚öñÔ∏è <b>–û—Ç–≤–µ—Ç:</b>\n\n{answer}",
#             parse_mode='HTML',
#             reply_markup=get_jurist_keyboard()
#         )
#     except Exception as e:
#         await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")