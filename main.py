import asyncio
import os


from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart
from dotenv import load_dotenv

import keyboards as kb
from charity import get_charity
from news import get_news_today, get_data_today, get_news_yesterday, get_data_yesterday, send_long_message

load_dotenv()
TOKEN = os.getenv("TOKEN")
bot = Bot(token=TOKEN)
dp = Dispatcher()


@dp.message(CommandStart())
async def start(message: types.Message):
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç {message.from_user.first_name or message.from_user.username}, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –º–µ–Ω—é",
                         reply_markup=kb.reply_menu)

@dp.message()
async def text_handler(message: types.Message):
    if message.text == "üì∞ –ù–æ–≤–æ—Å—Ç–∏":
        await message.answer('–ó–∞ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –≤–∞–º –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏?',reply_markup=kb.inline_news)
    elif message.text == 'üåé –ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ–Ω–¥—ã':
        charity_info, markup = await get_charity(0)
        if charity_info is None:
            await message.answer("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ñ–æ–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        await message.answer(charity_info, reply_markup=markup)
    elif message.text == 'üìö –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –û–†–¢':
        pass

# üåé –ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ–Ω–¥—ã
@dp.callback_query(lambda c: c.data.startswith("next:"))
async def process_next_fund(callback_query: types.CallbackQuery):
    index = int(callback_query.data.split(":")[1])  # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ñ–æ–Ω–¥–∞

    charity_info, markup = await get_charity(index)  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ñ–æ–Ω–¥–∞

    if charity_info is None:
        await callback_query.answer("–ë–æ–ª—å—à–µ —Ñ–æ–Ω–¥–æ–≤ –Ω–µ—Ç.")
        return

    await callback_query.message.answer(charity_info, reply_markup=markup)
    await callback_query.answer()



# üì∞ –ù–æ–≤–æ—Å—Ç–∏
@dp.callback_query()
async def callback_query_handler(call: types.CallbackQuery):
    if call.data == "today":
        news = await get_news_today()
        data = await get_data_today()
        await send_long_message(call.message, data)
        if news and news.strip():
            await send_long_message(call.message, news)
        else:
            await send_long_message(call.message, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    elif call.data == 'yesterday':
        news = await get_news_yesterday()
        data = await get_data_yesterday()
        await send_long_message(call.message, data)
        if news and news.strip():
            await send_long_message(call.message, news)
        else:
            await send_long_message(call.message, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")



async def main():
    print("Bot started...")
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())
