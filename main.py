import asyncio
import os


from aiogram import Bot, Dispatcher
from aiogram.filters import CommandStart
from dotenv import load_dotenv

import keyboards as kb
from database import db
from charity import get_charity
from helping_animals import *
from news import get_news_today, get_data_today, get_news_yesterday, get_data_yesterday, send_long_message, \
    news_handler, weather_handler, back_to_main, currency_handler
from ORT_ai import ort_router, on_startup, example_handler, change_subject, exit_handler
from bot_jurist import jurist_router, start_jurist, show_lawyers, how_to_apply, basic_rights, \
    exit_jurist  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ä–æ—É—Ç–µ—Ä

load_dotenv()
TOKEN = os.getenv("TOKEN")
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –ü–æ–¥–∫–ª—é—á–∞–µ–º –≤—Å–µ —Ä–æ—É—Ç–µ—Ä—ã
dp.include_router(ort_router)
dp.include_router(jurist_router)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
user_states = {}
donations = {}
shelter_phone = "+996 555 123456"


@dp.message(CommandStart())
async def start(message: types.Message):
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await db.add_user(
        user_id=message.from_user.id,
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name
    )

    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç {message.from_user.first_name or message.from_user.username}, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –º–µ–Ω—é",
        reply_markup=kb.reply_menu
    )

@dp.message()
async def text_handler(message: types.Message):
    user_id = message.from_user.id

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–π
    if user_id in user_states and user_states[user_id] == 'waiting_for_donation':
        try:
            amount = int(message.text)
            if amount < 10:
                await message.answer("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è ‚Äî 10 —Å–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return

            donations[user_id] = amount
            await message.answer(f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ –≤ —Ä–∞–∑–º–µ—Ä–µ {amount} —Å–æ–º! ‚ù§Ô∏è")
            await message.answer(f"–î–ª—è —Å–≤—è–∑–∏ —Å –ø—Ä–∏—é—Ç–æ–º –∑–≤–æ–Ω–∏—Ç–µ –ø–æ –Ω–æ–º–µ—Ä—É: {shelter_phone}")
            del user_states[user_id]
        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã).")
        return

    # –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
    if message.text == "üì∞ –°–µ—Ä–≤–∏—Å—ã":
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å', reply_markup=kb.reply_service)
    elif message.text == 'üì∞ –ù–æ–≤–æ—Å—Ç–∏':
        await news_handler(message)
    elif message.text == 'üå§ –ü–æ–≥–æ–¥–∞':
        await weather_handler(message)
    elif message.text == 'üí± –ö—É—Ä—Å –≤–∞–ª—é—Ç':
        await currency_handler(message)
    elif message.text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥':
        await back_to_main(message)
    elif message.text == 'üåé –ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ–Ω–¥—ã':
        charity_info, markup = await get_charity(0)
        if charity_info is None:
            await message.answer("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ñ–æ–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        await message.answer(charity_info, reply_markup=markup)
    elif message.text == "ü¶Æ –ü–∏—Ç–æ–º–Ω–∏–∫":
        await start_animals(message)
    elif message.text == '–ó–∞–±—Ä–∞—Ç—å –ø–∏—Ç–æ–º—Ü–∞':
        await start_survey(message)
    elif message.text == '–ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å':
        await donate_start(message)
    elif message.text == "–ü—Ä–∏–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞":
        await example_handler(message)
    elif message.text == '–°–º–µ–Ω–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç':
        await change_subject(message)
    elif message.text == '–í—ã—Ö–æ–¥':
        await exit_handler(message)
    elif message.text == 'üíº –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫':
        await start_jurist(message)
    elif message.text == '–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —é—Ä–∏—Å—Ç—ã':
        await show_lawyers(message)
    elif message.text == '–ö–∞–∫ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏–µ?':
        await how_to_apply(message)
    elif message.text == '–ú–æ–∏ –ø—Ä–∞–≤–∞':
        await basic_rights(message)
    elif message.text == '‚Ü©Ô∏è –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é':
        await exit_jurist(message)
    # –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫ —Ç–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ jurist_router

@dp.callback_query(lambda c: c.data.startswith("next:"))
async def process_next_fund(callback_query: types.CallbackQuery):
    index = int(callback_query.data.split(":")[1])
    charity_info, markup = await get_charity(index)

    if charity_info is None:
        await callback_query.answer("–ë–æ–ª—å—à–µ —Ñ–æ–Ω–¥–æ–≤ –Ω–µ—Ç.")
        return

    await callback_query.message.answer(charity_info, reply_markup=markup)
    await callback_query.answer()

@dp.callback_query(lambda c: c.data in ["today", "yesterday"])
async def news_callback_handler(call: types.CallbackQuery):
    if call.data == "today":
        news = await get_news_today()
        data = await get_data_today()
        await send_long_message(call.message, data)
        if news and news.strip():
            await send_long_message(call.message, news)
        else:
            await send_long_message(call.message, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    elif call.data == 'yesterday':
        news = await get_news_yesterday()
        data = await get_data_yesterday()
        await send_long_message(call.message, data)
        if news and news.strip():
            await send_long_message(call.message, news)
        else:
            await send_long_message(call.message, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    await call.answer()

@dp.callback_query(lambda c: c.data.startswith(('answer_', 'adopt_', 'skip_', 'back_')))
async def animals_callback_handler(call: types.CallbackQuery):
    if call.data.startswith('answer_'):
        await handle_answer(call)
    elif call.data.startswith('adopt_'):
        await adopt_pet(call)
    elif call.data.startswith('skip_'):
        await next_pet(call)
    elif call.data.startswith('back_'):
        await previous_pet(call)



async def donate_start(message: types.Message):
    user_id = message.from_user.id
    user_states[user_id] = 'waiting_for_donation'
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å (–≤ —Å–æ–º–∞—Ö):")


async def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await db.connect()
    await db.create_tables()

    await on_startup()
    print("Bot started...")
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
