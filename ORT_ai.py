import asyncio
import os
from aiogram import types, Router, F
from dotenv import load_dotenv
from openai import OpenAI
from datetime import datetime, timedelta
import logging

import keyboards

load_dotenv()
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

ort_router = Router()
OPENROUTER_API_KEY = os.getenv('OPEN_AI_CHAT_KEY')
YOUR_SITE_URL = "https://web.telegram.org/k/#@PT_Aman_BOT"
YOUR_SITE_NAME = "PT_Aman"

ort_sessions = {}
SESSION_TIMEOUT = timedelta(minutes=30)


def get_ort_keyboard():
    return types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="–°–º–µ–Ω–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç")],
            [types.KeyboardButton(text="–ü—Ä–∏–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞")],
            [types.KeyboardButton(text="–í—ã—Ö–æ–¥")]
        ],
        resize_keyboard=True,
        input_field_placeholder="–ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å..."
    )


async def cleanup_sessions():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π"""
    while True:
        try:
            now = datetime.now()
            expired_users = [
                user_id for user_id, session in ort_sessions.items()
                if now - session['last_activity'] > SESSION_TIMEOUT
            ]
            for user_id in expired_users:
                del ort_sessions[user_id]
                logger.info(f"–°–µ—Å—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—á–∏—â–µ–Ω–∞ –ø–æ —Ç–∞–π–º–∞—É—Ç—É")
            await asyncio.sleep(300)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ cleanup_sessions: {e}")
            await asyncio.sleep(60)


@ort_router.callback_query(F.data.in_(['geography', 'informatics', 'russian', 'english']))
async def ort_callback_handler(call: types.CallbackQuery):
    try:
        user_id = call.from_user.id
        logger.info(f"User {user_id} selected {call.data}")

        subjects = {
            'geography': '–≥–µ–æ–≥—Ä–∞—Ñ–∏–∏',
            'informatics': '–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–µ',
            'russian': '—Ä—É—Å—Å–∫–æ–º—É —è–∑—ã–∫—É',
            'english': '–∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É —è–∑—ã–∫—É'
        }

        ort_sessions[user_id] = {
            'subject': subjects[call.data],
            'last_activity': datetime.now()
        }

        await call.message.answer(
            f"üîç <b>–†–µ–∂–∏–º –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –û–†–¢ –ø–æ {subjects[call.data]}</b>\n\n"
            "–¢–µ–ø–µ—Ä—å —è –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–æ–π –∫ —ç–∫–∑–∞–º–µ–Ω—É. –ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã, "
            "–∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –¥–∞—Ç—å —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–µ–π.",
            reply_markup=get_ort_keyboard(),
            parse_mode="HTML"
        )
        await call.answer()
    except Exception as e:
        logger.error(f"Error in ort_callback_handler: {e}")
        await call.message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç —Å–Ω–æ–≤–∞.")


async def example_handler(message: types.Message):
    try:
        user_id = message.from_user.id
        if user_id not in ort_sessions:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏")
            return

        examples = {
            '–≥–µ–æ–≥—Ä–∞—Ñ–∏–∏': "‚Ä¢ –ö–∞–∫–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã –≤–ª–∏—è—é—Ç –Ω–∞ –∫–ª–∏–º–∞—Ç –Æ–∂–Ω–æ–π –ê–º–µ—Ä–∏–∫–∏?\n"
                         "‚Ä¢ –û–±—ä—è—Å–Ω–∏—Ç–µ –∫—Ä—É–≥–æ–≤–æ—Ä–æ—Ç –≤–æ–¥—ã –≤ –ø—Ä–∏—Ä–æ–¥–µ\n"
                         "‚Ä¢ –ö–∞–∫–∏–µ –µ—Å—Ç—å —Ç–∏–ø—ã –ø–æ—á–≤ –∏ –∏—Ö –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏?",
            '–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–µ': "‚Ä¢ –û–±—ä—è—Å–Ω–∏ —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É TCP –∏ UDP\n"
                           "‚Ä¢ –ß—Ç–æ —Ç–∞–∫–æ–µ –±–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫?\n"
                           "‚Ä¢ –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ä–µ–∫—É—Ä—Å–∏—è?",
            '—Ä—É—Å—Å–∫–æ–º—É —è–∑—ã–∫—É': "‚Ä¢ –ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ: '–æ–¥–µ—Ç—å' –∏–ª–∏ '–Ω–∞–¥–µ—Ç—å'?\n"
                              "‚Ä¢ –û–±—ä—è—Å–Ω–∏—Ç–µ –ø—Ä–∞–≤–∏–ª–æ '–∂–∏-—à–∏'\n"
                              "‚Ä¢ –ß—Ç–æ —Ç–∞–∫–æ–µ –ø—Ä–∏—á–∞—Å—Ç–Ω—ã–π –æ–±–æ—Ä–æ—Ç?",
            '–∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É —è–∑—ã–∫—É': "‚Ä¢ –ö–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Present Perfect?\n"
                                 "‚Ä¢ –í —á–µ–º —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É Past Simple –∏ Past Continuous?\n"
                                 "‚Ä¢ –ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞—Ä—Ç–∏–∫–ª–∏?"
        }

        subject = ort_sessions[user_id]['subject']
        ort_sessions[user_id]['last_activity'] = datetime.now()

        await message.answer(
            f"<b>–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ {subject}:</b>\n\n{examples[subject]}\n\n"
            "–ú–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –ª—é–±–æ–π –∏–∑ —ç—Ç–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–ª–∏ —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π.",
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ example_handler: {e}")



async def change_subject(message: types.Message):
    try:
        from keyboards import inline_ort_subjects
        ort_sessions[message.from_user.id]['last_activity'] = datetime.now()
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏:",
            reply_markup=inline_ort_subjects
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ change_subject: {e}")



async def exit_handler(message: types.Message):
    try:
        user_id = message.from_user.id
        if user_id in ort_sessions:
            subject = ort_sessions[user_id]['subject']
            del ort_sessions[user_id]
            await message.answer(
                f"–†–µ–∂–∏–º –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –ø–æ {subject} –∑–∞–≤–µ—Ä—à–µ–Ω.\n"
                "–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è, –≤—ã–±—Ä–∞–≤ –ø—Ä–µ–¥–º–µ—Ç —Å–Ω–æ–≤–∞.",
                reply_markup=types.ReplyKeyboardRemove()
            )
        else:
            await message.answer("–í—ã –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏",keyboards.reply_menu)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ exit_handler: {e}")


@ort_router.message(
    F.text &
    F.from_user.id.in_(ort_sessions) &
    ~F.text.in_(["–°–º–µ–Ω–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç", "–ü—Ä–∏–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞", "–í—ã—Ö–æ–¥"])
)
async def chat_with_deepseek(message: types.Message):
    try:
        user_id = message.from_user.id
        user_session = ort_sessions[user_id]
        user_session['last_activity'] = datetime.now()

        logger.info(f"Processing question from {user_id}: {message.text}")

        if not OPENROUTER_API_KEY:
            raise ValueError("API key not configured")

        client = OpenAI(
            base_url="https://openrouter.ai/api/v1",
            api_key=OPENROUTER_API_KEY
        )

        await message.bot.send_chat_action(message.chat.id, "typing")

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ –∑–∞–ø—Ä–æ—Å
        prompt = (
            f"–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ –û–†–¢ –ø–æ {user_session['subject']}. "
            f"–û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å —Å—Ç—É–¥–µ–Ω—Ç–∞ –ø–æ–¥—Ä–æ–±–Ω–æ, –Ω–æ –ø–æ–Ω—è—Ç–Ω–æ:\n\n"
            f"–í–æ–ø—Ä–æ—Å: {message.text}"
        )

        response = client.chat.completions.create(

            model="google/gemma-2-9b-it:free",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.7
        )

        answer_ = response.choices[0].message.content
        logger.info(f"DeepSeek response length: {len(answer_)} chars")

        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç–∏
        if len(answer_) > 4000:
            parts = [answer_[i:i + 4000] for i in range(0, len(answer_), 4000)]
            for part in parts:
                await message.answer(part)
                await asyncio.sleep(0.5)
        else:
            await message.answer(answer_)

    except Exception as e:
        logger.error(f"DeepSeek error: {str(e)}")
        await message.answer(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
            "1. –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å\n"
            "2. –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ\n"
            "3. –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é"
        )


async def on_startup():
    """–ó–∞–ø—É—Å–∫ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞"""
    try:
        logger.info("–ó–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Å—Å–∏–π")
        asyncio.create_task(cleanup_sessions())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ on_startup: {e}")